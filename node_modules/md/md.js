// md ~ JavaScript Markdown Parser
// (c) 2011 Paul Vorbach
// md is freely distributable under the MIT license.

(function() {
  var root = this;
  var append = require('append');

  // Markdown functionality
  function deploy(opt) {
    
    // option initialization
    var defaultOpt = {
      dialect: 'mkd'
    };
    if (typeof opt == 'string')
      if (opt == 'mkd')
        opt = append(defaultOpt, {
          dialect: 'mkd'
        });
      else if (opt == 'gfm')
        opt = append(defaultOpt, {
          dialect: 'gfm'
        });
      else
        throw new Error('Dialect not supported');
    else if (typeof opt == 'object' || typeof opt == 'array') {
      opt = append(defaultOpt, opt);
      if (opt.dialect !== 'mkd' && opt.dialect !== 'gfm')
        throw new Error('Dialect not supported');
    } else
      throw new Error('Illegal argument');
    
    // block level grammar
    var block = {
      newline: /^\n+/,
      code: /^ {4,}[^\n]+(?:\n {4,}[^\n]*|\n)*(?=\n| *$)/,
      hr: /( *[\-*_]){3,} * \n/,
      heading: /^ *(#{1,6}) *([^\0]+?) *#* *\n+/",
      lheading: /^([^\n]+)\n *(=|-){3,}/,
      blockquote: /^ *>[^\n]*(?:\n *>[^\n]*)*/,
      list: /^( *)([*+-]|\d+\.) [^\0]+?(?:\n{2,}(?! )|\s*$)(?!\1\2|\1\d+\.)/,
      html: /^ *(?:<!--[^\0]*?-->|<(\w+)[^\0]+?<\/\1>|<\w+[^>]*>) *(?:\n{2,}|\s*$)/,
      text: /^[^\n]+/
    };
    
    function lexer(text) {
      var tokens = [];
      var link = {};
      
      text = text.replace(/\r\n|\r/g, '\n')
// TODO        .replace(/\t/)
    }
    
    function md(text) {
      return text;
    }
    
    return md; 
  }

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = deploy;
    }
  }
}).call(this);
